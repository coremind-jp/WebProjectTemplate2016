/*
#styleguide
backgroundなRetina画像対応
実際に使う時は以下のmixinで設定する.
include backgorund-retina-image(画像へのパス, 拡張子, DotPerRatio);
```
<figure>
	<div class="sample-image">
</figure>
```
*/
.sample-image {
	@include backgorund-retina-image("../asset/150x150", ".png", 150px, 150px, 3);
}
/*
#styleguide
シェイプ：角丸
```
<style>
	.bg-blue { background: #aaf; }
	.w50h50  { width: 50px; height: 50px; }
	.w25h50  { width: 25px; height: 50px; }
	.w50h25  { width: 50px; height: 25px; }
	.child-as-inline-block > * { display: inline-block; margin: 10px; }
</style>
<div class="child-as-inline-block">
	<div class="w50h50 bg-blue roundrect gentle">roundrect gentle</div>
	<div class="w50h50 bg-blue roundrect">roundrect</div>
	<div class="w50h50 bg-blue roundrect sharp">roundrect sharp</div>
</div>
```
*/
/*
#styleguide
シェイプ：両端角丸
```
<div class="roundrect-group horizontal clearfix-after">
	<div class="w50h25 bg-blue float-left">1</div>
	<div class="w50h25 bg-blue float-left">2</div>
	<div class="w50h25 bg-blue float-left">3</div>
	<div class="w50h25 bg-blue float-left">4</div>
</div>

<div class="roundrect-group vertical">
	<div class="w25h50 bg-blue">1</div>
	<div class="w25h50 bg-blue">2</div>
	<div class="w25h50 bg-blue">3</div>
</div>
```
*/
@mixin roundrect-group($round-strength) {
	&.horizontal {
		:first-child {
			border-top-left-radius: $global-gap * $round-strength;
			border-bottom-left-radius: $global-gap * $round-strength;
		}
		:last-child {
			border-top-right-radius: $global-gap * $round-strength;
			border-bottom-right-radius: $global-gap * $round-strength;
		}
	}

	&.vertical {
		:first-child {
			border-top-left-radius: $global-gap * $round-strength;
			border-top-right-radius: $global-gap * $round-strength;
		}
		:last-child {
			border-bottom-left-radius: $global-gap * $round-strength;
			border-bottom-right-radius: $global-gap * $round-strength;
		}
	}
}
@mixin roundrect {
	overflow: hidden;

	border-radius: $global-gap;
	&.sharp  { border-radius: $global-gap * .5 }
	&.gentle { border-radius: $global-gap * 2; }
}
.roundrect {
	@include roundrect;
}
.roundrect-group.sharp  { @include roundrect-group(.5); }
.roundrect-group        { @include roundrect-group( 1); }
.roundrect-group.gentle { @include roundrect-group( 2); }
/*
#styleguide
シェイプ：円
```
<div class="w50h50 bg-blue circle">circle</div>
```
*/
.circle {
	overflow: hidden;
	border-radius: 100%;
}
/*
#styleguide
陰影
```
<div class="child-as-inline-block">
	<div class="w50h50 bg-blue circle shadow">shadow</div>
	<div class="w50h50 bg-blue circle shadow-45">shadow-45</div>
	<div class="w50h50 bg-blue circle shadow-90">shadow-90</div>
	<div class="w50h50 bg-blue circle shadow-135">shadow-135</div>
	<div class="w50h50 bg-blue circle shadow-180">shadow-180</div>
	<div class="w50h50 bg-blue circle shadow-225">shadow-225</div>
	<div class="w50h50 bg-blue circle shadow-270">shadow-270</div>
	<div class="w50h50 bg-blue circle shadow-315">shadow-315</div>
	<div class="w50h50 bg-blue circle shadow-360">shadow-360</div>
</div>
```
*/
$s: $shadow-size;
$c: $shadow-color;
.shadow     { box-shadow:   0px   0px $s $s $c; border-collapse: separate; }
.shadow-45  { box-shadow:    $s $s*-1 $s $s $c; border-collapse: separate; }
.shadow-90  { box-shadow:    $s   0px $s $s $c; border-collapse: separate; }
.shadow-135 { box-shadow:    $s    $s $s $s $c; border-collapse: separate; }
.shadow-180 { box-shadow:   0px    $s $s $s $c; border-collapse: separate; }
.shadow-225 { box-shadow: $s*-1    $s $s $s $c; border-collapse: separate; }
.shadow-270 { box-shadow: $s*-1   0px $s $s $c; border-collapse: separate; }
.shadow-315 { box-shadow: $s*-1 $s*-1 $s $s $c; border-collapse: separate; }
.shadow-360 { box-shadow:   0px $s*-1 $s $s $c; border-collapse: separate; }
/*
#styleguide
光源
```
<div class="child-as-inline-block">
	<div class="w50h50 bg-blue circle light">inset shadow</div>
	<div class="w50h50 bg-blue circle light-45">light-45</div>
	<div class="w50h50 bg-blue circle light-90">light-90</div>
	<div class="w50h50 bg-blue circle light-135">light-135</div>
	<div class="w50h50 bg-blue circle light-180">light-180</div>
	<div class="w50h50 bg-blue circle light-225">light-225</div>
	<div class="w50h50 bg-blue circle light-270">light-270</div>
	<div class="w50h50 bg-blue circle light-315">light-315</div>
	<div class="w50h50 bg-blue circle light-360">light-360</div>
</div>
```
*/
.light     { box-shadow:   0px   0px $s $s $c inset; }
.light-45  { box-shadow:    $s $s*-1 $s $s $c inset; }
.light-90  { box-shadow:    $s   0px $s $s $c inset; }
.light-135 { box-shadow:    $s    $s $s $s $c inset; }
.light-180 { box-shadow:   0px    $s $s $s $c inset; }
.light-225 { box-shadow: $s*-1    $s $s $s $c inset; }
.light-270 { box-shadow: $s*-1   0px $s $s $c inset; }
.light-315 { box-shadow: $s*-1 $s*-1 $s $s $c inset; }
.light-360 { box-shadow:   0px $s*-1 $s $s $c inset; }
/*
#styleguide
グラデーション：垂直(IEにも反映させるにはブロック要素のみで利用する)
実際に使う時は以下のmixinで設定する.
include generateGradient("vertical", 開始色, 終了色);
```
<div class="gradient-sample-vertical padding">vertical</div>
```
*/
.gradient-sample-vertical {
	@include generateGradient("vertical");
}
/*
#styleguide
グラデーション：水平(IEにも反映させるにはブロック要素のみで利用する)
実際に使う時は以下のmixinで設定する.
include generateGradient("horizontal", 開始色, 終了色);
```
<div class="gradient-sample-horizontal padding">horizontal</div>
```
*/
.gradient-sample-horizontal {
	@include generateGradient("horizontal");
}
/*
#styleguide
カラーボックス
```
<style>
	.color-box-sample {
		margin-bottom: 10px;
	}
</style>
<div class="body">
	<div class="color-box-sample roundrect error-bg padding">error color</div>
	<div class="color-box-sample roundrect warning-bg padding">warning color</div>
	<div class="color-box-sample roundrect success-bg padding">success color</div>
	<div class="color-box-sample roundrect info-bg padding">info color</div>
	<div class="color-box-sample roundrect system-bg padding">system color</div>
</div>
```
*/
.error-bg	  { background-color: rgba(#e77, 1); }
.error-text   { color: rgba(#e77, 1); }

.warning-bg   { background-color: rgba(#ed7, 1); }
.warning-text { color: rgba(#ed7, 1); }

.success-bg   { background-color: rgba(#7e7, 1); }
.success-text { color: rgba(#7e7, 1); }

.info-bg      { background-color: rgba(#79e, 1); }
.info-text    { color: rgba(#79e, 1); }

.system-bg    { background-color: rgba(#ddd, 1); }
.system-text  { color: rgba(#ddd, 1); }
/*
#styleguide
borderを利用したアロー
```
<div class="body">
	<div style="position: relative; text-indent: 15px;">
		<div class="arrow-up"></div>.arrow-up
	</div>
	<div style="position: relative; text-indent: 15px;">
		<div class="arrow-down"></div>.arrow-down
	</div>
	<div style="position: relative; text-indent: 15px;">
		<div class="arrow-left"></div>.arrow-left
	</div>
	<div style="position: relative; text-indent: 15px;">
		<div class="arrow-right"></div>.arrow-right
	</div>
</div>
```
*/
$arrow-wide: 5px;
$arrow-height: 7px;
.arrow {
	border: $arrow-wide solid transparent;
	pointer-events: none;
	width: 0;
	height: 0;
	position: absolute;
	top: 50%;
}
.arrow-down {
	@extend .arrow;
	border-top: $arrow-height solid #000;
	margin-top: -$arrow-height * .5;
}
.arrow-up {
	@extend .arrow;
	border-bottom: $arrow-height solid #000;
	margin-top: -($arrow-wide + $arrow-height * .5);
}
.arrow-left {
	@extend .arrow;
	border-right: $arrow-height solid #000;
	margin-top: -$arrow-height * .5;
	margin-left: -$arrow-wide;
}
.arrow-right {
	@extend .arrow;
	border-left: $arrow-height solid #000;
	margin-top: -$arrow-height * .5;
}
.arrow-down-after   { @include pseudo-after(inline-block)  { @extend .arrow-down;  } }
.arrow-down-before  { @include pseudo-before(inline-block) { @extend .arrow-down;  } }
.arrow-up-after     { @include pseudo-after(inline-block)  { @extend .arrow-up;    } }
.arrow-up-before    { @include pseudo-before(inline-block) { @extend .arrow-up;    } }
.arrow-left-after   { @include pseudo-after(inline-block)  { @extend .arrow-left;  } }
.arrow-left-before  { @include pseudo-before(inline-block) { @extend .arrow-left;  } }
.arrow-right-after  { @include pseudo-after(inline-block)  { @extend .arrow-right; } }
.arrow-right-before { @include pseudo-before(inline-block) { @extend .arrow-right; } }
/*
#styleguide
汎用閉じるボタン
```
<div class="clearfix-after anchor body">
	<div class="float-left full-width system-bg" style="position:absolute; z-index: -1; height: 10px;"></div>
	<div class="float-left full-width info-bg" style="margin-top: 10px; position:absolute; z-index: -1; height: 10px;"></div>
	<div class="float-left full-width" style="margin-top: 20px; position:absolute; z-index: -1; height: 10px;"></div>
	<div class="float-left full-width success-bg" style="margin-top: 30px; position:absolute; z-index: -1; height: 10px;"></div>
	<div class="inline-block">
		<small><b>enabled</b></small>
		<button class="fa-btn close"></button>
		<button class="fa-btn close roundrect sharp"></button>
		<button class="fa-btn close circle"></button>
	</div>
	<div class="inline-block">
		<small><b>disabled</b></small>
		<button class="fa-btn close" disabled></button>
		<button class="fa-btn close roundrect sharp" disabled></button>
		<button class="fa-btn close circle" disabled></button>
	</div>
</div>
```
*/
.fa-btn {
	border: none;
	font-size: 20px;
	width: 40px;
	height: 40px;

	&.close {
		@extend .fa;
		@extend .fa-times;

		&:active {
			padding: 0;//firefox css reset;
		}
	}

	//default-style
    color: #fff;
	background: rgba(#000, .2);

	&:hover {
		background: rgba(#000, .1);
	}

	&:active {
	    color: #000;
		background: rgba(#000, .2);
	}

	&:disabled {
		color: #000;
		background: rgba(#000, .5);
	}
}